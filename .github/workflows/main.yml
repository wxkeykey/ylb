name: 下载工具及其依赖并打包为离线包

on:
  workflow_dispatch:
    inputs:
      tool_name:
        description: '请输入要下载的工具名称 (例如 curl)'
        required: true
        default: 'curl'
      tag:
        description: '可选: 发布标签 (默认为当前日期)'
        required: false

jobs:
  download_and_package:
    runs-on: ubuntu-22.04
    steps:
    - name: 检出存储库
      uses: actions/checkout@v4

    - name: 更新系统并安装必要的工具
      run: |
        set -e
        sudo apt-get update
        sudo apt-get install -y dpkg-dev apt-rdepends

    - name: 创建临时目录
      run: |
        set -e
        TEMP_DIR=$(mktemp -d)
        echo "TEMP_DIR=$TEMP_DIR" >> $GITHUB_ENV

    - name: 获取工具及其依赖项
      id: get_dependencies
      run: |
        set -e
        tool="${{ github.event.inputs.tool_name }}"
        # 使用 apt-rdepends 获取工具及其所有依赖项，并过滤无效包
        dependencies=$(apt-rdepends --build-depends --follow=DEPENDS "$tool" | grep -v "^ " | xargs -n1 apt-cache show 2>/dev/null | grep "Package:" | awk '{print $2}' | sort -u)
        # 验证依赖列表是否为空
        if [ -z "$dependencies" ]; then
          echo "Error: No valid dependencies found for '$tool'."
          exit 1
        fi
        echo "dependencies=$dependencies" >> $GITHUB_ENV

    - name: 打印依赖列表
      run: |
        echo "Dependencies to download:"
        echo "${{ env.dependencies }}"

    - name: 下载工具及其依赖项
      run: |
        set -e
        cd "$TEMP_DIR"
        # 下载工具及其所有依赖项
        for pkg in ${{ env.dependencies }}; do
          if apt-cache show "$pkg" > /dev/null 2>&1; then
            apt-get download "$pkg"
          else
            echo "Warning: Package '$pkg' not found, skipping..."
          fi
        done

    - name: 打包工具及其依赖项
      run: |
        set -e
        cd "$TEMP_DIR"
        # 将所有下载的 .deb 文件打包成一个 tar.gz 文件
        package_name="${{ github.event.inputs.tool_name }}_offline_package_$(date +'%Y%m%d').tar.gz"
        tar -czf "$package_name" *.deb
        echo "PACKAGE_NAME=$package_name" >> $GITHUB_ENV

    - name: 列出生成的文件以调试
      run: |
        set -e
        ls -lh "$TEMP_DIR"

    - name: 确定发布名称和标签
      id: determine_release_info
      run: |
        set -e
        if [ -z "${{ github.event.inputs.tag }}" ]; then
          tag_name=$(date +'%Y%m%d')
        else
          tag_name="${{ github.event.inputs.tag }}"
        fi
        echo "RELEASE_TAG=$tag_name" >> $GITHUB_ENV
        echo "RELEASE_NAME=${{ env.PACKAGE_NAME }}" >> $GITHUB_ENV

    - name: 上传至 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        files: $TEMP_DIR/${{ env.PACKAGE_NAME }}
        body: "Offline package for ${{ github.event.inputs.tool_name }} and its dependencies"
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 清理临时文件
      run: |
        set -e
        rm -rf "$TEMP_DIR"
