name: Build and Package Tool with Dependencies

on:
  push:
    branches:
      - main  # 当代码推送到 main 分支时触发
  workflow_dispatch:
    inputs:
      tool_name:
        description: '请输入工具名称 (例如 curl, wget 等)'
        required: true
        default: 'curl'
      tag:
        description: '可选: 发布标签 (默认为当前日期)'
        required: false

jobs:
  build-and-package:
    runs-on: ubuntu-latest

    steps:
      # 检出代码（如果需要的话）
      - name: Checkout code
        uses: actions/checkout@v3

      # 设置输入变量
      - name: Set input variables
        id: set_vars
        run: |
          # 获取用户输入的工具名称
          if [ -z "${{ github.event.inputs.tool_name }}" ]; then
            echo "Error: tool_name is not provided. Please provide a valid tool name."
            exit 1
          fi

          echo "TOOL_NAME=${{ github.event.inputs.tool_name }}" >> $GITHUB_ENV
          
          # 获取用户输入的标签，如果没有提供则使用当前日期
          if [ -z "${{ github.event.inputs.tag }}" ]; then
            echo "RELEASE_TAG=$(date +'%Y%m%d')" >> $GITHUB_ENV
          else
            echo "RELEASE_TAG=${{ github.event.inputs.tag }}" >> $GITHUB_ENV
          fi

      # 更新系统并安装工具及其依赖
      - name: Install tool and dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ${{ env.TOOL_NAME }}  # 安装用户指定的工具及其依赖

      # 创建一个临时目录来存放工具及其依赖
      - name: Create temporary directory for packaging
        run: |
          mkdir -p /tmp/tool-package/bin
          mkdir -p /tmp/tool-package/lib

      # 复制工具及其依赖到临时目录
      - name: Copy tool and dependencies to package directory
        run: |
          # 检查 TOOL_NAME 是否为空
          if [ -z "${{ env.TOOL_NAME }}" ]; then
            echo "Error: TOOL_NAME is not set. Please provide a valid tool name."
            exit 1
          fi

          # 找到工具的二进制文件路径
          TOOL_PATH=$(which ${{ env.TOOL_NAME }})
          if [ -z "$TOOL_PATH" ]; then
            echo "Error: Tool '${{ env.TOOL_NAME }}' not found. Please ensure it is installed."
            exit 1
          fi
          echo "Tool binary path: $TOOL_PATH"
          
          # 复制工具二进制文件到临时目录
          cp $TOOL_PATH /tmp/tool-package/bin/

          # 使用 ldd 查找工具的所有依赖库，并复制到 lib 目录
          ldd $TOOL_PATH | grep '=>' | awk '{print $3}' | xargs -I '{}' cp --parents '{}' /tmp/tool-package/lib/

      # 打包工具及其依赖
      - name: Package tool and dependencies
        run: |
          cd /tmp/tool-package
          tar -czf /tmp/${{ env.TOOL_NAME }}-with-dependencies-${{ env.RELEASE_TAG }}.tar.gz .

      # 创建 GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.RELEASE_TAG }}  # 使用用户提供的标签或当前日期作为版本号
          release_name: Release ${{ env.RELEASE_TAG }}
          draft: false
          prerelease: false

      # 上传打包文件到 GitHub Releases
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}  # 获取 create_release 的输出
          asset_path: /tmp/${{ env.TOOL_NAME }}-with-dependencies-${{ env.RELEASE_TAG }}.tar.gz
          asset_name: ${{ env.TOOL_NAME }}-with-dependencies-${{ env.RELEASE_TAG }}.tar.gz
          asset_content_type: application/gzip
