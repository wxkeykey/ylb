name: 下载工具及其依赖并打包为离线包

on:
  workflow_dispatch:
    inputs:
      tool_name:
        description: '请输入要下载的工具名称 (例如 curl)'
        required: true
        default: 'curl'
      tag:
        description: '可选: 发布标签 (默认为当前日期)'
        required: false

jobs:
  download_and_package:
    runs-on: ubuntu-latest
    steps:
    - name: 检出存储库
      uses: actions/checkout@v4

    - name: 更新系统并安装必要的工具
      run: |
        sudo apt-get update
        sudo apt-get install -y dpkg-dev

    - name: 创建临时目录
      run: |
        mkdir -p temp_package
        cd temp_package

    - name: 获取工具及其依赖项
      id: get_dependencies
      run: |
        tool="${{ github.event.inputs.tool_name }}"
        # 使用 apt-cache 获取工具及其所有依赖项，并严格过滤有效包名
        dependencies=$(apt-cache depends --recurse --no-recommends --no-suggests --no-conflicts --no-breaks --no-replaces --no-enhances "$tool" | grep -E "^\w" | awk '{print $1}' | sort -u)
        echo "dependencies=$dependencies" >> $GITHUB_ENV

    - name: 下载工具及其依赖项
      run: |
        cd temp_package
        # 下载工具及其所有依赖项
        for pkg in ${{ env.dependencies }}; do
          apt-get download "$pkg"
        done

    - name: 打包工具及其依赖项
      run: |
        cd temp_package
        # 将所有下载的 .deb 文件打包成一个 tar.gz 文件
        package_name="${{ github.event.inputs.tool_name }}_offline_package.tar.gz"
        tar -czf "../$package_name" *.deb
        echo "PACKAGE_NAME=$package_name" >> $GITHUB_ENV

    - name: 列出生成的文件以调试
      run: |
        ls -lh

    - name: 确定发布名称和标签
      id: determine_release_info
      run: |
        if [ -z "${{ github.event.inputs.tag }}" ]; then
          tag_name=$(date +'%Y%m%d')
        else
          tag_name="${{ github.event.inputs.tag }}"
        fi
        echo "RELEASE_TAG=$tag_name" >> $GITHUB_ENV
        echo "RELEASE_NAME=${{ env.PACKAGE_NAME }}" >> $GITHUB_ENV

    - name: 上传至 GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        files: ${{ env.PACKAGE_NAME }}
        body: "Offline package for ${{ github.event.inputs.tool_name }} and its dependencies"
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 清理临时文件
      run: |
        rm -rf temp_package
